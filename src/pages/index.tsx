import type { NextPage } from 'next'
import Head from 'next/head'
import { useRef } from 'react'
import { trpc } from '../utils/trpc'
// import { prisma } from '../server/db/client'

const QuestionCreator: React.FC = () => {
  const inputRef = useRef(null)
  const client = trpc.useContext()
  const { mutate, isLoading } = trpc.useMutation('questions.create', {
    onSuccess: (data) => {
      // console.log('success data: ', data)
      client.invalidateQueries(['questions.getAll'])
      if (inputRef.current) inputRef.current.value = ''
    },
  })

  return (
    <input
      ref={inputRef}
      disabled={isLoading}
      type="text"
      className="my-6 p-2 text-center border-2 w-1/3"
      onKeyDown={(e) => {
        if (e.key === 'Enter') {
          mutate({ question: e.currentTarget.value })
          e.currentTarget.value = ''
        }
      }}
    />
  )
}

const Home: NextPage = () => {
  const { data } = trpc.useQuery(['questions.getAll'])
  // console.log('---- ', data)

  return (
    <>
      <Head>
        <title>Voting App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="container mx-auto flex flex-col items-center justify-center min-h-screen p-4">
        {/* <p className="text-2xl text-gray-700">{data?.questions[1]?.question}</p> */}

        {data ? (
          data.map((q) => (
            <p key={q.id} className="mb-2 text-xl text-blue-500">
              {q.question}
            </p>
          ))
        ) : (
          <p>Loading..</p>
        )}

        <QuestionCreator />
      </main>
    </>
  )
}

// export const getServerSideProps = async () => {
//   const questions = await prisma.pollQuestion.findMany()

//   return {
//     props: {
//       questions: JSON.stringify(questions),
//     },
//   }
// }

export default Home
